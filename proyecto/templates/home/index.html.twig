{% extends 'base.html.twig' %}

{% block title %}Los Mejores Memes - {{ parent() }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success-color: #10b981;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
            --info-color: #3b82f6;
        }
        
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
        }
        
        .hero-section {
            background: var(--primary-gradient);
            color: white;
            padding: 3rem 0;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }
        
        .hero-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1.5" fill="rgba(255,255,255,0.05)"/><circle cx="50" cy="10" r="0.5" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>') repeat;
            opacity: 0.3;
        }
        
        .hero-content {
            position: relative;
            z-index: 1;
            text-align: center;
        }
        
        .hero-title {
            font-size: 3rem;
            font-weight: 800;
            margin-bottom: 1rem;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .hero-subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 2rem;
        }
        
        .hero-stats {
            display: flex;
            justify-content: center;
            gap: 2rem;
            flex-wrap: wrap;
        }
        
        .stat-item {
            text-align: center;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            display: block;
        }
        
        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }
        
        .controls-section {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .search-filters {
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .search-input {
            padding: 0.5rem 1rem;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 0.9rem;
            min-width: 250px;
            transition: border-color 0.15s;
        }
        
        .search-input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .filter-dropdown {
            padding: 0.5rem 1rem;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 0.9rem;
            background: white;
            cursor: pointer;
        }
        
        .view-toggle {
            display: flex;
            gap: 0.5rem;
        }
        
        .view-btn {
            padding: 0.5rem 1rem;
            border: 2px solid #e5e7eb;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.15s;
        }
        
        .view-btn.active {
            background: var(--primary-gradient);
            color: white;
            border-color: transparent;
        }
        
        .memes-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .memes-grid.list-view {
            grid-template-columns: 1fr;
        }
        
        .meme-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .meme-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
        }
        
        .meme-image-container {
            position: relative;
            overflow: hidden;
            background: #f3f4f6;
        }
        
        .meme-image {
            width: 100%;
            height: 250px;
            object-fit: cover;
            transition: transform 0.3s ease;
        }
        
        .meme-card:hover .meme-image {
            transform: scale(1.05);
        }
        
        .meme-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(to bottom, transparent 60%, rgba(0,0,0,0.3) 100%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .meme-card:hover .meme-overlay {
            opacity: 1;
        }
        
        .meme-actions {
            position: absolute;
            top: 1rem;
            right: 1rem;
            display: flex;
            gap: 0.5rem;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .meme-card:hover .meme-actions {
            opacity: 1;
        }
        
        .action-btn {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border: none;
            background: rgba(255, 255, 255, 0.9);
            color: #374151;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.15s;
            backdrop-filter: blur(10px);
        }
        
        .action-btn:hover {
            background: white;
            transform: scale(1.1);
        }
        
        .action-btn.liked {
            background: var(--danger-color);
            color: white;
        }
        
        .meme-content {
            padding: 1.25rem;
        }
        
        .meme-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.5rem;
            line-height: 1.4;
        }
        
        .meme-description {
            color: #6b7280;
            font-size: 0.9rem;
            line-height: 1.5;
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .meme-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.8rem;
            color: #9ca3af;
        }
        
        .meme-stats {
            display: flex;
            gap: 1rem;
            align-items: center;
        }
        
        .stat-item {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }
        
        .meme-author {
            font-weight: 500;
            color: #667eea;
        }
        
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }
        
        .empty-icon {
            width: 80px;
            height: 80px;
            margin: 0 auto 1.5rem;
            color: #d1d5db;
        }
        
        .empty-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.5rem;
        }
        
        .empty-message {
            color: #6b7280;
            margin-bottom: 2rem;
        }
        
        .btn-primary {
            background: var(--primary-gradient);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            text-decoration: none;
            display: inline-block;
            transition: all 0.15s;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
            color: white;
            text-decoration: none;
        }
        
        .loading-skeleton {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: .5; }
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
            margin-top: 2rem;
        }
        
        .pagination-btn {
            padding: 0.5rem 1rem;
            border: 2px solid #e5e7eb;
            background: white;
            border-radius: 8px;
            color: #374151;
            text-decoration: none;
            transition: all 0.15s;
        }
        
        .pagination-btn:hover {
            border-color: #667eea;
            color: #667eea;
            text-decoration: none;
        }
        
        .pagination-btn.active {
            background: var(--primary-gradient);
            border-color: transparent;
            color: white;
        }
        
        .list-view .meme-card {
            display: grid;
            grid-template-columns: 200px 1fr;
            gap: 1.5rem;
        }
        
        .list-view .meme-image {
            height: 150px;
        }
        
        .list-view .meme-content {
            padding: 1rem 1rem 1rem 0;
        }
        
        @media (max-width: 768px) {
            .hero-title {
                font-size: 2rem;
            }
            
            .hero-stats {
                gap: 1rem;
            }
            
            .controls-section {
                flex-direction: column;
                align-items: stretch;
            }
            
            .search-filters {
                flex-direction: column;
            }
            
            .search-input {
                min-width: unset;
                width: 100%;
            }
            
            .memes-grid {
                grid-template-columns: 1fr;
            }
            
            .list-view .meme-card {
                grid-template-columns: 120px 1fr;
                gap: 1rem;
            }
            
            .list-view .meme-image {
                height: 120px;
            }
        }
    </style>
{% endblock %}

{% block body %}
<div class="hero-section">
    <div class="container">
        <div class="hero-content">
            <h1 class="hero-title">🔥 MemeHub</h1>
            <p class="hero-subtitle">Los memes más divertidos de la comunidad</p>
            <div class="hero-stats">
                <div class="stat-item">
                    <span class="stat-number">{{ memes|length }}</span>
                    <span class="stat-label">Memes</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">1.2K</span>
                    <span class="stat-label">Likes</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">420</span>
                    <span class="stat-label">Usuarios</span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="controls-section">
        <div class="search-filters">
            <input type="text" class="search-input" placeholder="🔍 Buscar memes..." id="search-input">
            <select class="filter-dropdown" id="sort-filter">
                <option value="newest">Más recientes</option>
                <option value="popular">Más populares</option>
                <option value="liked">Más likes</option>
            </select>
        </div>
        <div class="view-toggle">
            <button class="view-btn active" data-view="grid" id="grid-view">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M1 2.5A1.5 1.5 0 0 1 2.5 1h3A1.5 1.5 0 0 1 7 2.5v3A1.5 1.5 0 0 1 5.5 7h-3A1.5 1.5 0 0 1 1 5.5v-3zm8 0A1.5 1.5 0 0 1 10.5 1h3A1.5 1.5 0 0 1 15 2.5v3A1.5 1.5 0 0 1 13.5 7h-3A1.5 1.5 0 0 1 9 5.5v-3zm-8 8A1.5 1.5 0 0 1 2.5 9h3A1.5 1.5 0 0 1 7 10.5v3A1.5 1.5 0 0 1 5.5 15h-3A1.5 1.5 0 0 1 1 13.5v-3zm8 0A1.5 1.5 0 0 1 10.5 9h3a1.5 1.5 0 0 1 1.5 1.5v3a1.5 1.5 0 0 1-1.5 1.5h-3A1.5 1.5 0 0 1 9 13.5v-3z"/>
                </svg>
            </button>
            <button class="view-btn" data-view="list" id="list-view">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z"/>
                </svg>
            </button>
        </div>
    </div>

    <div class="memes-grid" id="memes-container">
        {% for meme in memes %}
            <article class="meme-card" data-title="{{ meme.titulo|lower }}" data-description="{{ meme.descripcion|lower }}">
                <div class="meme-image-container">
                    <img src="{{ asset('uploads/' ~ meme.rutaImagen) }}" 
                         class="meme-image" 
                         alt="{{ meme.titulo }}"
                         loading="lazy">
                    <div class="meme-overlay"></div>
                    <div class="meme-actions">
                        <button class="action-btn like-btn" data-meme-id="{{ meme.id ?? loop.index }}" title="Me gusta">
                            <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8 14.25l-.345-.666A8.5 8.5 0 0 1 1.5 6.5v-.667C1.5 3.42 3.42 1.5 5.917 1.5c1.237 0 2.4.5 3.208 1.417a4.5 4.5 0 0 1 3.208-1.417C14.58 1.5 16.5 3.42 16.5 5.833V6.5a8.5 8.5 0 0 1-6.155 7.084L8 14.25z"/>
                            </svg>
                        </button>
                        <button class="action-btn share-btn" data-meme-id="{{ meme.id ?? loop.index }}" title="Compartir">
                            <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.499 2.499 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5z"/>
                            </svg>
                        </button>
                    </div>
                </div>
                
                <div class="meme-content">
                    <h3 class="meme-title">{{ meme.titulo }}</h3>
                    {% if meme.descripcion %}
                        <p class="meme-description">{{ meme.descripcion }}</p>
                    {% endif %}
                    <div class="meme-meta">
                        <div class="meme-stats">
                            <span class="stat-item">
                                <svg width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 14.25l-.345-.666A8.5 8.5 0 0 1 1.5 6.5v-.667C1.5 3.42 3.42 1.5 5.917 1.5c1.237 0 2.4.5 3.208 1.417a4.5 4.5 0 0 1 3.208-1.417C14.58 1.5 16.5 3.42 16.5 5.833V6.5a8.5 8.5 0 0 1-6.155 7.084L8 14.25z"/>
                                </svg>
                                <span class="like-count">{{ random(5, 150) }}</span>
                            </span>
                            <span class="stat-item">
                                <svg width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M1.5 1.5A.5.5 0 0 0 1 2v4.8a2.5 2.5 0 0 0 2.5 2.5h9.793l.853.854A.5.5 0 0 0 15 9.5a.5.5 0 0 0-.146-.354L13.707 8H3.5A1.5 1.5 0 0 1 2 6.5V2a.5.5 0 0 0-.5-.5z"/>
                                </svg>
                                <span>{{ random(0, 25) }}</span>
                            </span>
                        </div>
                        <span class="meme-author">
                            {% if meme.usuario is defined %}
                                @{{ meme.usuario.username ?? 'usuario' ~ random(1, 100) }}
                            {% else %}
                                @usuario{{ random(1, 100) }}
                            {% endif %}
                        </span>
                    </div>
                </div>
            </article>
        {% else %}
            <div class="empty-state">
                <svg class="empty-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.462-.638-6.314-1.761M16.804 5.267A10.954 10.954 0 0112 4.5c-1.563 0-3.071.32-4.455.896A7.985 7.985 0 0112 15c2.206 0 4.195-.89 5.656-2.344M16.804 5.267A10.978 10.978 0 0020.5 12c0 4.025-2.161 7.556-5.388 9.472"></path>
                </svg>
                <h2 class="empty-title">¡Aún no hay memes!</h2>
                <p class="empty-message">Sé el primero en compartir un meme divertido con la comunidad</p>
                <a href="{{ path('app_meme_new') }}" class="btn-primary">

                    Subir mi primer meme 🚀
                </a>
            </div>
        {% endfor %}
    </div>

    {% if memes|length > 0 %}
        <div class="pagination">
            <a href="#" class="pagination-btn">← Anterior</a>
            <a href="#" class="pagination-btn active">1</a>
            <a href="#" class="pagination-btn">2</a>
            <a href="#" class="pagination-btn">3</a>
            <a href="#" class="pagination-btn">Siguiente →</a>
        </div>
    {% endif %}
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('search-input');
            const sortFilter = document.getElementById('sort-filter');
            const memesContainer = document.getElementById('memes-container');
            const gridViewBtn = document.getElementById('grid-view');
            const listViewBtn = document.getElementById('list-view');
            const viewBtns = document.querySelectorAll('.view-btn');
            
            let currentView = 'grid';
            let likedMemes = JSON.parse(localStorage.getItem('likedMemes') || '[]');

            // Inicializar likes guardados
            function initializeLikes() {
                likedMemes.forEach(memeId => {
                    const likeBtn = document.querySelector(`[data-meme-id="${memeId}"]`);
                    if (likeBtn) {
                        likeBtn.classList.add('liked');
                    }
                });
            }

            // Función de búsqueda
            function filterMemes() {
                const searchTerm = searchInput.value.toLowerCase();
                const sortBy = sortFilter.value;
                const memeCards = document.querySelectorAll('.meme-card');

                let visibleMemes = Array.from(memeCards).filter(card => {
                    const title = card.dataset.title || '';
                    const description = card.dataset.description || '';
                    const matches = title.includes(searchTerm) || description.includes(searchTerm);
                    
                    card.style.display = matches ? 'block' : 'none';
                    return matches;
                });

                // Ordenar memes
                if (sortBy === 'popular') {
                    visibleMemes.sort((a, b) => {
                        const likesA = parseInt(a.querySelector('.like-count').textContent);
                        const likesB = parseInt(b.querySelector('.like-count').textContent);
                        return likesB - likesA;
                    });
                } else if (sortBy === 'liked') {
                    visibleMemes.sort((a, b) => {
                        const isLikedA = a.querySelector('.like-btn').classList.contains('liked');
                        const isLikedB = b.querySelector('.like-btn').classList.contains('liked');
                        return isLikedB - isLikedA;
                    });
                }

                // Reordenar elementos en el DOM
                visibleMemes.forEach(meme => {
                    memesContainer.appendChild(meme);
                });
            }

            // Cambio de vista
            function switchView(view) {
                currentView = view;
                
                viewBtns.forEach(btn => {
                    btn.classList.toggle('active', btn.dataset.view === view);
                });

                memesContainer.classList.toggle('list-view', view === 'list');
            }

            // Sistema de likes
            function toggleLike(memeId, likeBtn) {
                const likeCount = likeBtn.closest('.meme-card').querySelector('.like-count');
                let currentCount = parseInt(likeCount.textContent);
                
                if (likedMemes.includes(memeId)) {
                    // Quitar like
                    likedMemes = likedMemes.filter(id => id !== memeId);
                    likeBtn.classList.remove('liked');
                    currentCount--;
                } else {
                    // Añadir like
                    likedMemes.push(memeId);
                    likeBtn.classList.add('liked');
                    currentCount++;
                }
                
                likeCount.textContent = currentCount;
                localStorage.setItem('likedMemes', JSON.stringify(likedMemes));
                
                // Animación
                likeBtn.style.transform = 'scale(0.8)';
                setTimeout(() => {
                    likeBtn.style.transform = 'scale(1)';
                }, 150);
            }

            // Función de compartir
            function shareMeme(memeCard) {
                const title = memeCard.querySelector('.meme-title').textContent;
                const url = window.location.href;
                
                if (navigator.share) {
                    navigator.share({
                        title: title,
                        text: `¡Mira este meme divertido: ${title}!`,
                        url: url
                    });
                } else {
                    // Fallback: copiar al portapapeles
                    navigator.clipboard.writeText(`${title} - ${url}`).then(() => {
                        // Mostrar notificación temporal
                        const notification = document.createElement('div');
                        notification.textContent = '¡Enlace copiado!';
                        notification.style.cssText = `
                            position: fixed;
                            top: 20px;
                            right: 20px;
                            background: var(--success-color);
                            color: white;
                            padding: 1rem;
                            border-radius: 8px;
                            z-index: 1000;
                            animation: slideIn 0.3s ease;
                        `;
                        document.body.appendChild(notification);
                        
                        setTimeout(() => {
                            notification.remove();
                        }, 3000);
                    });
                }
            }

            // Event listeners
            searchInput.addEventListener('input', filterMemes);
            sortFilter.addEventListener('change', filterMemes);

            gridViewBtn.addEventListener('click', () => switchView('grid'));
            listViewBtn.addEventListener('click', () => switchView('list'));

            // Delegación de eventos para likes y compartir
            memesContainer.addEventListener('click', function(e) {
                if (e.target.closest('.like-btn')) {
                    const likeBtn = e.target.closest('.like-btn');
                    const memeId = likeBtn.dataset.memeId;
                    toggleLike(memeId, likeBtn);
                }
                
                if (e.target.closest('.share-btn')) {
                    const memeCard = e.target.closest('.meme-card');
                    shareMeme(memeCard);
                }
            });

            // Lazy loading de imágenes mejorado
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.style.opacity = '0';
                        img.style.transition = 'opacity 0.5s ease-in-out';
                        img.onload = () => {
                            img.style.opacity = '1';
                        };
                        observer.unobserve(img);
                    }
                });
            }, { threshold: 0.1 }); // 10% visible
            document.querySelectorAll('.meme-image').forEach(img => {
                imageObserver.observe(img);
            });

            // Inicializar
            initializeLikes();
            filterMemes();
        });
    </script>
{% endblock %}