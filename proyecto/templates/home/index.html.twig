{% extends 'base.html.twig' %}

{% block title %}Los Mejores Memes - {{ parent() }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success-color: #10b981;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
            --info-color: #3b82f6;
        }
        
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
        }
        
        .hero-section {
            background: var(--primary-gradient);
            color: white;
            padding: 3rem 0;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }
        
        .hero-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\"><polygon fill=\"%236c5ce7\" points=\"0,100 100,0 100,100\"/></svg>') no-repeat top left/cover;
            opacity: 0.1;
        }
        
        .hero-content {
            position: relative;
            z-index: 1;
        }
        
        .meme-card {
            border: none;
            border-radius: 1rem;
            overflow: hidden;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s ease-in-out;
            background: #fff;
        }
        
        .meme-card:hover {
            transform: translateY(-5px);
        }
        
        .meme-image {
            width: 100%;
            height: 250px;
            object-fit: cover;
        }
        
        .meme-actions {
            background: #f8f9fa;
        }
        
        .like-btn, .share-btn, .view-btn {
            color: #6c757d;
            transition: color 0.2s ease;
        }
        
        .like-btn.liked {
            color: var(--danger-color);
        }
        
        .like-btn.liked i {
            animation: pulse 0.5s ease-in-out;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        
        .filter-section .btn {
            color: #6c757d;
            transition: color 0.2s;
        }
        
        .filter-section .btn.active {
            color: var(--primary-gradient);
        }
        
        /* Estilos de la vista de lista */
        .list-view .meme-card {
            display: flex;
            align-items: center;
            flex-direction: row;
        }
        
        .list-view .meme-image {
            width: 150px;
            height: 150px;
            object-fit: contain;
            border-radius: 1rem;
        }
        
        .list-view .card-body {
            flex-grow: 1;
        }
        
        .list-view .meme-actions {
            flex-shrink: 0;
        }
    </style>
{% endblock %}

{% block body %}
    <header class="hero-section">
        <div class="container hero-content text-center">
            <h1 class="display-4">El mejor lugar para encontrar tus memes</h1>
            <p class="lead">Explora, comparte y sube tus memes favoritos.</p>
        </div>
    </header>

    <div class="container">
        {% for message in app.flashes('success') %}
            <div class="alert alert-success">{{ message }}</div>
        {% endfor %}

        <div class="d-flex justify-content-between align-items-center mb-4">
            <div class="btn-group" role="group" aria-label="Vista">
                <button type="button" class="btn btn-secondary active" data-view="grid-view" id="grid-view-btn"><i class="fas fa-th"></i> Cuadrícula</button>
                <button type="button" class="btn btn-secondary" data-view="list-view" id="list-view-btn"><i class="fas fa-list"></i> Lista</button>
            </div>
            <div class="filter-section">
                <button type="button" class="btn btn-link active" data-filter="recent">Más Recientes</button>
                <button type="button" class="btn btn-link" data-filter="likes">Más Votados</button>
            </div>
        </div>

        <div id="memes-container" class="row grid-view">
            {% for meme in memes %}
                <div class="col-md-4 mb-4 meme-card-wrapper" data-meme-id="{{ meme.id }}" data-likes="0" data-is-liked="false">
                    <div class="meme-card">
                        <img src="{{ asset('uploads/' ~ meme.rutaImagen) }}" class="meme-image card-img-top" alt="{{ meme.titulo }}" loading="lazy">
                        <div class="card-body">
                            <h5 class="card-title">{{ meme.titulo }}</h5>
                            <p class="card-text text-muted">{{ meme.descripcion }}</p>
                        </div>
                        <div class="meme-actions d-flex justify-content-around py-2">
                            <button class="btn btn-link like-btn" data-meme-id="{{ meme.id }}">
                                <i class="fas fa-heart"></i>
                            </button>
                            <span class="likes-count">0</span>
                            <button class="btn btn-link share-btn"><i class="fas fa-share"></i></button>
                        </div>
                    </div>
                </div>
            {% else %}
                <div class="col-12 text-center">
                    <div class="alert alert-info" role="alert">
                        <p class="mb-0">Aún no hay memes subidos. ¡Sé el primero!</p>
                        <hr>
                        <a href="{{ path('app_meme_new') }}" class="btn btn-primary mt-2">Subir mi primer meme</a>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('search-input');
            const sortFilter = document.getElementById('sort-filter');
            const memesContainer = document.getElementById('memes-container');
            const gridViewBtn = document.getElementById('grid-view-btn');
            const listViewBtn = document.getElementById('list-view-btn');
            const filterRecentBtn = document.querySelector('[data-filter="recent"]');
            const filterLikesBtn = document.querySelector('[data-filter="likes"]');

            function initializeLikes() {
                const likedMemes = JSON.parse(localStorage.getItem('likedMemes')) || {};
                document.querySelectorAll('.meme-card-wrapper').forEach(memeCard => {
                    const memeId = memeCard.dataset.memeId;
                    if (likedMemes[memeId]) {
                        const likeBtn = memeCard.querySelector('.like-btn');
                        likeBtn.classList.add('liked');
                        memeCard.dataset.isLiked = 'true';
                    }
                });
            }
            
            function toggleLike(memeId, likeBtn) {
                let likedMemes = JSON.parse(localStorage.getItem('likedMemes')) || {};
                const memeCard = likeBtn.closest('.meme-card-wrapper');
                
                if (likedMemes[memeId]) {
                    delete likedMemes[memeId];
                    likeBtn.classList.remove('liked');
                    memeCard.dataset.isLiked = 'false';
                } else {
                    likedMemes[memeId] = true;
                    likeBtn.classList.add('liked');
                    memeCard.dataset.isLiked = 'true';
                }
                
                localStorage.setItem('likedMemes', JSON.stringify(likedMemes));
                
                const likesCountElement = memeCard.querySelector('.likes-count');
                const currentLikes = Object.keys(likedMemes).length;
                likesCountElement.textContent = currentLikes;
            }

            function filterMemes() {
                const isRecent = filterRecentBtn.classList.contains('active');
                const memes = Array.from(document.querySelectorAll('.meme-card-wrapper'));

                memes.sort((a, b) => {
                    const aLikes = parseInt(a.dataset.likes, 10);
                    const bLikes = parseInt(b.dataset.likes, 10);
                    const aId = parseInt(a.dataset.memeId, 10);
                    const bId = parseInt(b.dataset.memeId, 10);

                    if (isRecent) {
                        return bId - aId;
                    } else {
                        return bLikes - aLikes;
                    }
                });
                
                memes.forEach(meme => memesContainer.appendChild(meme));
            }

            function shareMeme(memeCard) {
                const memeTitle = memeCard.querySelector('.card-title').textContent;
                const memeUrl = window.location.href;

                if (navigator.share) {
                    navigator.share({
                        title: memeTitle,
                        text: '¡Mira este meme!',
                        url: memeUrl,
                    })
                    .catch(error => console.error('Error al compartir:', error));
                } else {
                    alert('La función de compartir no está soportada en tu navegador.');
                }
            }
            
            if (gridViewBtn && listViewBtn) {
                gridViewBtn.addEventListener('click', () => {
                    memesContainer.classList.remove('list-view');
                    memesContainer.classList.add('grid-view');
                    gridViewBtn.classList.add('active');
                    listViewBtn.classList.remove('active');
                });
                
                listViewBtn.addEventListener('click', () => {
                    memesContainer.classList.remove('grid-view');
                    memesContainer.classList.add('list-view');
                    listViewBtn.classList.add('active');
                    gridViewBtn.classList.remove('active');
                });
            }

            if (filterRecentBtn && filterLikesBtn) {
                filterRecentBtn.addEventListener('click', () => {
                    filterRecentBtn.classList.add('active');
                    filterLikesBtn.classList.remove('active');
                    filterMemes();
                });

                filterLikesBtn.addEventListener('click', () => {
                    filterLikesBtn.classList.add('active');
                    filterRecentBtn.classList.remove('active');
                    filterMemes();
                });
            }

            if (memesContainer) {
                memesContainer.addEventListener('click', function(e) {
                    if (e.target.closest('.like-btn')) {
                        const likeBtn = e.target.closest('.like-btn');
                        const memeId = likeBtn.dataset.memeId;
                        toggleLike(memeId, likeBtn);
                    }
                    if (e.target.closest('.share-btn')) {
                        const memeCard = e.target.closest('.meme-card');
                        shareMeme(memeCard);
                    }
                });
                
                const imageObserver = new IntersectionObserver((entries, observer) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            img.style.opacity = '0';
                            img.style.transition = 'opacity 0.5s ease-in-out';
                            img.onload = () => {
                                img.style.opacity = '1';
                            };
                            observer.unobserve(img);
                        }
                    });
                }, { threshold: 0.1 });
                
                document.querySelectorAll('.meme-image').forEach(img => {
                    imageObserver.observe(img);
                });
                initializeLikes();
                filterMemes();
            }
        });
    </script>
{% endblock %}